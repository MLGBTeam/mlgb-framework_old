server:
    port: ${port:8088}
spring:
    profiles:
        active: dev
    datasource:
        initialize: true
        separator: /*--SEPARATOR--*/
        platform: ${spring.datasource.druid.db-type}
        schema: classpath:schema-${spring.datasource.platform}.sql
        druid:
            # 连接池初始化大小
            initialSize: 1
            # 最小连接池数量
            minIdle: 1
            # 最大连接池数量
            maxActive: 10
            # 获取连接时最大等待时间，单位毫秒。 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
            # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
            maxWait: 10000
            # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒。
            timeBetweenEvictionRunsMillis: 60000
            # 配置一个连接在池中最小生存的时间，单位是毫秒。连接保持空闲而不被驱逐的最长时间。
            minEvictableIdleTimeMillis: 300000
            # 是否缓存preparedStatement，也就是PSCache。
            # PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
            poolPreparedStatements: false
            # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
            # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
            maxOpenPreparedStatements: -1
            # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
            # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
            validationQuery: select 'x'
            # 单位：秒，检测连接是否有效的超时时间。
            validationQueryTimeout: 1
            # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
            # 如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
            testWhileIdle: true
            # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
            testOnBorrow: false
            # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
            testOnReturn: false
            # 配置 connection-properties，启用加密，配置公钥。
            connection-properties: config.decrypt=true;config.decrypt.key=${publickey}
            filter:
                # 启动ConfigFilter
                config:
                    enabled: true
                stat:
                   enabled: true
                   merge-sql: true
                   slow-sql-millis: 3000
                   log-slow-sql: true
                # 日志
                slf4j:
                    enabled: true
                    statementExecuteAfterLogEnabled: false
                    connectionLogEnabled: false
                    statementPrepareAfterLogEnabled: false
                    statementExecutableSqlLogEnable: false
                # 防火墙
                wall:
                    enabled: true
                    config:
                        # 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
                        noneBaseStatementAllow: true
logback:
    log-home: logs
    appname: mlgb-framework
pagehelper:
    # helperDialect: mysql
    # 分页合理化参数。当该参数设置为 true 时，pageNum<=0 时会查询第一页，
    # pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
    reasonable: true
    # 当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果
    #（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。
    page-size-zero: true
    supportMethodsArguments: true
    # 允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用sqlserver）
    autoRuntimeDialect: true
mapper:
    before: true
    identity: SELECT uuid();

---
# 开发环境配置
spring:
    profiles: dev
    datasource:
        druid:
            # 数据库驱动名。这一项可配可不配，如果不配置druid会根据url自动识别dbType，
            # 然后选择相应的driverClassName。
            db-type: mysql
            driver-class-name: com.mysql.jdbc.Driver
            # 数据库连接
            url: jdbc:mysql://lujunfeng.cn:3306/mlgbframework?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false
            # 数据库用户名
            username: mlgb
            # 数据库密码
            # mlgbTeam@666
            password: IwMbXUllGNmP7KZ0jg81WXAL77wSzn1FiRNXucN9gfLFPEEGnIW8CVYNg+oR+zVBd99irA3RnwLYC0yzvC2jqQ==
# 公钥
publickey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKRhzjxE1lIRvZ8duMdcTFDvEPD0RYPMwTGwLMvSKtTgIOsL/BQPajqDZmsiFCwH6vINESknnxiU1wxpSMHkyoUCAwEAAQ==

---
# 测试环境配置
spring:
    profiles: test

---
# 生产环境配置
spring:
    profiles: prod
